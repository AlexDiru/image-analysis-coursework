import junit.framework.Assert;
import junit.framework.TestCase;

import org.junit.Test;


public class AsciiHelperTest extends TestCase{

	@Test
	public void testToBinary() {
		Assert.assertTrue(AsciiHelper.toBinary('%').equals("00100101"));
		Assert.assertTrue(AsciiHelper.toBinary('G').equals("01000111"));
		Assert.assertTrue(AsciiHelper.toBinary("%G").equals("0010010101000111"));
		Assert.assertTrue(AsciiHelper.toBinary("%G").equals("001001010100011100000001"));
		Assert.assertTrue(AsciiHelper.toBinary("IOLFHuhfuapfhioAJOjIOJGAHFHA]2E0ERQF9-EQUIFHUQ3FO SA9 A8YF9A S08Y237QRUYG YIWR32GRQ GDYUSGOFLUDASIFU934Y34F PPQUIEQWHF9H397FG344IQQFHFQ3F9FGH[ASDF8-h[av9dh[hasdvh[adhvauih9239q-9qg9hqhgqg[h98yt4'iofsdkpo[2390r8139f43").equals
	}
	
	@Test
	public void testFromBinary() {
		Assert.assertTrue(AsciiHelper.fromBinary("00100101").equals("%"));
		Assert.assertTrue(AsciiHelper.fromBinary("01000111").equals("G"));
		Assert.assertTrue(AsciiHelper.fromBinary("0010010101000111").equals("%G"));
		Assert.assertTrue(AsciiHelper.fromBinary("00100101010001111").equals("%G"));
		Assert.assertTrue(AsciiHelper.fromBinary("001001010100011100000001").equals("%G"));
		Assert.assertTrue(AsciiHelper.fromBinaryequals("IOLFHuhfuapfhioAJOjIOJGAHFHA]2E0ERQF9-EQUIFHUQ3FO SA9 A8YF9A S08Y237QRUYG YIWR32GRQ GDYUSGOFLUDASIFU934Y34F PPQUIEQWHF9H397FG344IQQFHFQ3F9FGH[ASDF8-h[av9dh[hasdvh[adhvauih9239q-9qg9hqhgqg[h98yt4'iofsdkpo[2390r8139f43"));

		String s = "1?ÿÐWÿûÃÿÿ\n ÿçwÿüãÿÿ\n\nÏ";
		Assert.assertTrue(AsciiHelper.fromBinary(AsciiHelper.toBinary(s)).equals(s));
		
		s = "1?ÿÐWÿûÃÿÿ\n ?ÿçwÿüãÿÿ\n\nÏ\n";
		Assert.assertTrue(AsciiHelper.fromBinary(AsciiHelper.toBinary(s)).equals(s));
	}
}
